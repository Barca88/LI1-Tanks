-- | Este módulo define funções comuns da Tarefa 5 do trabalho prático.
module Tarefa5_2018li1g142 where

import LI11819
import Tarefa1_2018li1g142
import Tarefa2_2018li1g142
import Tarefa4_2018li1g142
import Graphics.Gloss       
import Graphics.Gloss.Data.Picture  
import Graphics.Gloss.Interface.Pure.Game

-- | Imagens do Jogo
data Pics = Pics
    { p1      :: Picture  -- ^ Imagems do jogador 1
    , p2      :: Picture  -- ^ Imagems do jogador 1
    , p3      :: Picture  -- ^ Imagems do jogador 1
    , p4      :: Picture  -- ^ Imagems do jogador 1
    , laserP  :: Picture  -- ^ Imagem do Laser
    , canhaoP :: Picture  -- ^ Imagem do canhao
    , choqueP :: Picture  -- ^ imagem do choque
    , menu0   :: Picture  -- ^ Escolher o numero de Jogadores
    , menu1   :: Picture  -- ^ 1º Menu
    , menu2   :: Picture  -- ^ 2º Menu
    }
    deriving (Show,Eq)

-- | Controlos do Jogo
data Keys = Keys
    { p1Up      :: Event  -- ^ Chave que movimenta o jogador 1 para Cima
    , p1Down    :: Event  -- ^ Chave que movimenta o jogador 1 para Baixo
    , p1Left    :: Event  -- ^ Chave que movimenta o jogador 1 para Esquerda
    , p1Rigth   :: Event  -- ^ Chave que movimenta o jogador 1 para Direita
    , p1Canhao  :: Event  -- ^ Chave que o jogador 1 dispara o canhao
    , p1Laser   :: Event  -- ^ Chave que o jogador 1 dispara o laser
    , p1Choque  :: Event  -- ^ Chave que o jogador 1 dispara o choque
    , p2Up      :: Event  -- ^ Chave que movimenta o jogador 2 para Cima
    , p2Down    :: Event  -- ^ Chave que movimenta o jogador 2 para Baixo
    , p2Left    :: Event  -- ^ Chave que movimenta o jogador 2 para Esquerda
    , p2Rigth   :: Event  -- ^ Chave que movimenta o jogador 2 para Direita
    , p2Canhao  :: Event  -- ^ Chave que o jogador 2 dispara o canhao
    , p2Laser   :: Event  -- ^ Chave que o jogador 2 dispara o laser
    , p2Choque  :: Event  -- ^ Chave que o jogador 2 dispara o choque
    , p3Up      :: Event  -- ^ Chave que movimenta o jogador 3 para Cima
    , p3Down    :: Event  -- ^ Chave que movimenta o jogador 3 para Baixo
    , p3Left    :: Event  -- ^ Chave que movimenta o jogador 3 para Esquerda
    , p3Rigth   :: Event  -- ^ Chave que movimenta o jogador 3 para Direita
    , p3Canhao  :: Event  -- ^ Chave que o jogador 3 dispara o canhao
    , p3Laser   :: Event  -- ^ Chave que o jogador 3 dispara o laser
    , p3Choque  :: Event  -- ^ Chave que o jogador 3 dispara o choque
    , p4Up      :: Event  -- ^ Chave que movimenta o jogador 4 para Cima
    , p4Down    :: Event  -- ^ Chave que movimenta o jogador 4 para Baixo
    , p4Left    :: Event  -- ^ Chave que movimenta o jogador 4 para Esquerda
    , p4Rigth   :: Event  -- ^ Chave que movimenta o jogador 4 para Direita
    , p4Canhao  :: Event  -- ^ Chave que o jogador 4 dispara o canhao
    , p4Laser   :: Event  -- ^ Chave que o jogador 4 dispara o laser
    , p4Choque  :: Event  -- ^ Chave que o jogador 4 dispara o choque
    , pausaJ    :: Event  -- ^ Pausa no Jogo
    }
    deriving (Show,Eq)

keysDefaultJogo = Keys (EventKey (Char 'w')            Down (Modifiers Down Down Down) (0,0))
                       (EventKey (Char 's')            Down (Modifiers Down Down Down) (0,0))
                       (EventKey (Char 'a')            Down (Modifiers Down Down Down) (0,0))
                       (EventKey (Char 'd')            Down (Modifiers Down Down Down) (0,0))
                       (EventKey (Char '1')            Down (Modifiers Down Down Down) (0,0))
                       (EventKey (Char '2')            Down (Modifiers Down Down Down) (0,0))
                       (EventKey (Char '3')            Down (Modifiers Down Down Down) (0,0))
                       (EventKey (Char 't')            Down (Modifiers Down Down Down) (0,0))
                       (EventKey (Char 'g')            Down (Modifiers Down Down Down) (0,0))
                       (EventKey (Char 'f')            Down (Modifiers Down Down Down) (0,0))
                       (EventKey (Char 'h')            Down (Modifiers Down Down Down) (0,0))
                       (EventKey (Char '4')            Down (Modifiers Down Down Down) (0,0))
                       (EventKey (Char '5')            Down (Modifiers Down Down Down) (0,0))
                       (EventKey (Char '6')            Down (Modifiers Down Down Down) (0,0))
                       (EventKey (Char 'i')            Down (Modifiers Down Down Down) (0,0))
                       (EventKey (Char 'k')            Down (Modifiers Down Down Down) (0,0))
                       (EventKey (Char 'j')            Down (Modifiers Down Down Down) (0,0))
                       (EventKey (Char 'l')            Down (Modifiers Down Down Down) (0,0))
                       (EventKey (Char '7')            Down (Modifiers Down Down Down) (0,0))
                       (EventKey (Char '8')            Down (Modifiers Down Down Down) (0,0))
                       (EventKey (Char '9')            Down (Modifiers Down Down Down) (0,0))
                       (EventKey (SpecialKey KeyUp)    Down (Modifiers Down Down Down) (0,0))
                       (EventKey (SpecialKey KeyDown)  Down (Modifiers Down Down Down) (0,0))
                       (EventKey (SpecialKey KeyLeft)  Down (Modifiers Down Down Down) (0,0))
                       (EventKey (SpecialKey KeyRight) Down (Modifiers Down Down Down) (0,0))
                       (EventKey (Char ',')            Down (Modifiers Down Down Down) (0,0))
                       (EventKey (Char '.')            Down (Modifiers Down Down Down) (0,0))
                       (EventKey (Char '-')            Down (Modifiers Down Down Down) (0,0))
                       (EventKey (SpecialKey KeyF1)    Down (Modifiers Down Down Down) (0,0))

-- | Banco de comandos do editor
data KeysEd = KeysEd
    { up      :: Event -- ^ Move Para cima
    , down    :: Event -- ^ Move Para baixo
    , left    :: Event -- ^ Move Para esquerda
    , rigth   :: Event -- ^ Move Para direita
    , roda    :: Event -- ^ Roda Tertromino
    , mudaT   :: Event -- ^ Muda Tetromino
    , mudaP   :: Event -- ^ Muda parede
    , desenha :: Event -- ^ Desenha Tertromino
    , restart :: Event -- ^ Recomeçar a desenhar
    , sair    :: Event -- ^ Sair do menu editor
    }
    deriving (Show,Eq)
    

keysDefaultEd = KeysEd (EventKey (SpecialKey KeyUp)    Down (Modifiers Down Down Down) (0,0))
                (EventKey (SpecialKey KeyDown)  Down (Modifiers Down Down Down) (0,0))
                (EventKey (SpecialKey KeyLeft)  Down (Modifiers Down Down Down) (0,0))
                (EventKey (SpecialKey KeyRight) Down (Modifiers Down Down Down) (0,0))
                (EventKey (Char 'r')            Down (Modifiers Down Down Down) (0,0))
                (EventKey (Char 't')            Down (Modifiers Down Down Down) (0,0))
                (EventKey (Char 'p')            Down (Modifiers Down Down Down) (0,0))
                (EventKey (Char 'd')            Down (Modifiers Down Down Down) (0,0))
                (EventKey (SpecialKey KeyF5)    Down (Modifiers Down Down Down) (0,0))
                (EventKey (SpecialKey KeyF1)    Down (Modifiers Down Down Down) (0,0))

data KeyGen = KeyGen
    { um     :: Event
    , dois   :: Event
    , tres   :: Event
    , quatro :: Event
    }
    deriving (Show,Eq)

-- | Controlos iniciais default para escolhas nos menus
keysDefaultMenu = KeyGen (EventKey (Char '1') Down (Modifiers Up Up Up) (0,0))
                         (EventKey (Char '2') Down (Modifiers Up Up Up) (0,0))
                         (EventKey (Char '3') Down (Modifiers Up Up Up) (0,0))
                         (EventKey (Char '4') Down (Modifiers Up Up Up) (0,0))

data KeyBank = KeyBank
    { keyGamePlay :: Keys       -- ^ Banco de controladores do Jogo
    , keyEditor   :: KeysEd     -- ^ Banco de chaves do Editor
    , keyGeneral  :: KeyGen     -- ^ Chaves que serao usadas para configurar o jogo
    }
    deriving (Show,Eq)

data Sitio = Sitio
    { pausaS         :: Bool  -- ^ Jogo esta em pausa
    , jogo           :: Bool  -- ^ Jogo começou
    , jogadores      :: Bool  -- ^ O numero de jogadores esta defenido
    , mapaDefenido   :: Bool  -- ^ O mapa esta escolhido
    , escolherMapa   :: Bool  -- ^ Menu escolher Mapa
    , editarMapa     :: Bool  -- ^ Menu CriarMapa
    , editarComandos :: Bool  -- ^ Menu Editar Controlos
    , escolheNovo    :: Bool  -- ^ Está á espera do novo evento para editar os controlos
    , antigoEvent    :: Event -- ^ Evento que vai ser substituido
    , proibioTrocar  :: Bool  -- ^ Evento pode ou nao ser substituido 
    }
    deriving (Read,Show,Eq)

-- | Valores inicias do Sitio
sitioDefault = Sitio False False False False False False False False (EventKey (Char ' ') Down (Modifiers Down Down Down) (0,0)) False

data World = World
    { estado :: Estado   -- ^ Estado do Jogo
    , keys   :: KeyBank  -- ^ Banco de commandos
    , pics   :: Pics     -- ^ Banco de Imagens
    , editor :: Editor   -- ^ Editor para criar o Estado Inicial
    , sitio  :: Sitio    -- ^ Identifica onde estou
    }
    deriving (Show,Eq)

comparaEvent :: Event -> Event -> Bool
comparaEvent (EventKey k1 ks1 _ _) (EventKey k2 ks2 _ _) 
= if (k1 == k2 && ks1 == ks2) 
    then True
    else False


 -- | Funcao auxiiliar que compara o comando recebido com os que a aplicação tem guardados devolvendo um tupulo com o identificador do jogador e com a jogada a executar
reageJogo :: Event -> World -> World
reageJogo e w@(World es ks p ed s@(Sitio pa jg js md esm em ec edc ev po))
    | comparaEvent e (p1Up k    )= World (jogada 0 (Movimenta C)    es) ks p ed s 
    | comparaEvent e (p1Down k  )= World (jogada 0 (Movimenta B)    es) ks p ed s 
    | comparaEvent e (p1Left k  )= World (jogada 0 (Movimenta E)    es) ks p ed s 
    | comparaEvent e (p1Rigth k )= World (jogada 0 (Movimenta D)    es) ks p ed s 
    | comparaEvent e (p1Canhao k)= World (jogada 0 (Dispara Canhao) es) ks p ed s 
    | comparaEvent e (p1Laser k )= World (jogada 0 (Dispara Laser ) es) ks p ed s 
    | comparaEvent e (p1Choque k)= World (jogada 0 (Dispara Choque) es) ks p ed s 
    | comparaEvent e (p2Up k    )= World (jogada 1 (Movimenta C)    es) ks p ed s 
    | comparaEvent e (p2Down k  )= World (jogada 1 (Movimenta B)    es) ks p ed s 
    | comparaEvent e (p2Left k  )= World (jogada 1 (Movimenta E)    es) ks p ed s 
    | comparaEvent e (p2Rigth k )= World (jogada 1 (Movimenta D)    es) ks p ed s 
    | comparaEvent e (p2Canhao k)= World (jogada 1 (Dispara Canhao) es) ks p ed s 
    | comparaEvent e (p2Laser k )= World (jogada 1 (Dispara Laser ) es) ks p ed s 
    | comparaEvent e (p2Choque k)= World (jogada 1 (Dispara Choque) es) ks p ed s 
    | comparaEvent e (p3Up k    )= World (jogada 2 (Movimenta C)    es) ks p ed s 
    | comparaEvent e (p3Down k  )= World (jogada 2 (Movimenta B)    es) ks p ed s 
    | comparaEvent e (p3Left k  )= World (jogada 2 (Movimenta E)    es) ks p ed s 
    | comparaEvent e (p3Rigth k )= World (jogada 2 (Movimenta D)    es) ks p ed s 
    | comparaEvent e (p3Canhao k)= World (jogada 2 (Dispara Canhao) es) ks p ed s 
    | comparaEvent e (p3Laser k )= World (jogada 2 (Dispara Laser ) es) ks p ed s 
    | comparaEvent e (p3Choque k)= World (jogada 2 (Dispara Choque) es) ks p ed s 
    | comparaEvent e (p4Up k    )= World (jogada 3 (Movimenta C)    es) ks p ed s 
    | comparaEvent e (p4Down k  )= World (jogada 3 (Movimenta B)    es) ks p ed s 
    | comparaEvent e (p4Left k  )= World (jogada 3 (Movimenta E)    es) ks p ed s 
    | comparaEvent e (p4Rigth k )= World (jogada 3 (Movimenta D)    es) ks p ed s 
    | comparaEvent e (p4Canhao k)= World (jogada 3 (Dispara Canhao) es) ks p ed s 
    | comparaEvent e (p4Laser k )= World (jogada 3 (Dispara Laser ) es) ks p ed s 
    | comparaEvent e (p4Choque k)= World (jogada 3 (Dispara Choque) es) ks p ed s 
    | comparaEvent e (pausaJ k  )= World es ks p ed $ Sitio (not pa) jg js md esm em ec edc ev po
    | otherwise = w
    where k = keyGamePlay ks

reagePausa :: Event -> World -> World
reagePausa e w@(World es ks p ed s@(Sitio pa jg js md esm em ec edc ev po))
    | comparaEvent e (um k    ) = World es ks p ed $ Sitio (not pa) jg js md esm em ec edc ev po
    | comparaEvent e (dois k  ) = w -- TODO
    | comparaEvent e (tres k  ) = World es ks p ed $ Sitio pa jg js md esm em (not ec) edc ev po
    | comparaEvent e (quatro k) = World es ks p ed $ Sitio (not pa) (not jg) js md esm em ec edc ev po
    | otherwise   = w
    where k = keyGeneral ks 

-- | Funcao que reage ao editor
reageEditor :: Event -> World -> World
reageEditor e w@(World es ks p ed s@(Sitio pa jg js md esm em ec edc ev po))
    | comparaEvent e (up k     ) = World es ks p (instrucao (Move C)      ed) s
    | comparaEvent e (down k   ) = World es ks p (instrucao (Move B)      ed) s
    | comparaEvent e (left k   ) = World es ks p (instrucao (Move E)      ed) s
    | comparaEvent e (rigth k  ) = World es ks p (instrucao (Move D)      ed) s
    | comparaEvent e (roda k   ) = World es ks p (instrucao Roda          ed) s
    | comparaEvent e (mudaT k  ) = World es ks p (instrucao MudaTetromino ed) s
    | comparaEvent e (mudaP k  ) = World es ks p (instrucao MudaParede    ed) s
    | comparaEvent e (desenha k) = World es ks p (instrucao Desenha       ed) s
    | comparaEvent e (restart k) = World es ks p (editorInicial []) s
    | comparaEvent e (sair k   ) = World es ks p ed (Sitio pa jg js True False False ec edc ev po)
    | otherwise = w
    where k = keyEditor ks

-- | Funcao que adiciona os Jogadores condiçoes (js == False)
reageMenu0 :: Event -> World -> World 
reageMenu0 e w@(World es ks p ed s@(Sitio pa jg js md esm em ec edc ev po)) 
    | comparaEvent e (um k    ) = World (Estado m [onePlayer] d)                 ks p ed s
    | comparaEvent e (dois k  ) = World (Estado m [onePlayer,onePlayer] d)       ks p ed s
    | comparaEvent e (tres k  ) = World (Estado m (take 3 (repeat onePlayer)) d) ks p ed s
    | comparaEvent e (quatro k) = World (Estado m (take 4 (repeat onePlayer)) d) ks p ed s
    | otherwise     = w
    where k = keyGeneral ks
          Estado m j d = es
          onePlayer = Jogador (0,0) D 6 3 3
          s = Sitio pa jg (not js) md esm em ec edc ev po

-- | Função que reage ao Menu1   condiçoes (jg == False && js == True && md == False && esm == False)
reageMenu1 :: Event -> World -> World
reageMenu1 e w@(World es ks p ed (Sitio pa jg js md esm em ec edc ev po)) 
    | comparaEvent e (um k    ) = World es ks p ed $ Sitio pa jg js md (not esm) em ec edc ev po
    | comparaEvent e (dois k  ) = World es ks p ed $ Sitio pa jg (not js) md esm em ec edc ev po
    | comparaEvent e (tres k  ) = World es ks p ed $ Sitio pa jg js md esm em (not ec) edc ev po
    | otherwise   = w
    where k = keyGeneral ks

 -- | Função que reage ao Menu2  condiçoes (jg == False && js == True && md == False && esm == True)
reageMenu2 :: Event -> World -> World
reageMenu2 e w@(World es ks p ed@(Editor pos dir t par m) s@(Sitio pa jg js md esm em ec edc ev po))
    | comparaEvent e (um k    ) = World es ks p (Editor pos dir t par mapa1) $ Sitio pa jg js True esm em ec edc ev po
    | comparaEvent e (dois k  ) = World es ks p (Editor pos dir t par mapa2) $ Sitio pa jg js True (not esm) em ec edc ev po
    | comparaEvent e (tres k  ) = World es ks p (Editor pos dir t par mapa3) $ Sitio pa jg js True (not esm) em ec edc ev po
    | comparaEvent e (quatro k) = World es ks p ed $ Sitio pa jg js md esm (not em) ec edc ev po
    | otherwise     = w
    where k = keyGeneral ks    

-- | Função que reage ao Menu3   condiçoes (jg == False && js == True && md == True)
reageMenu3 :: Event -> World -> World
reageMenu3 e w@(World es ks p ed (Sitio pa jg js md esm em ec edc ev po)) 
    | comparaEvent e (um k    ) = World es ks p ed $ Sitio pa (not jg) js md esm em ec edc ev po
    | comparaEvent e (dois k  ) = World es ks p ed $ Sitio pa jg js md (not esm) em ec edc ev po
    | comparaEvent e (tres k  ) = World es ks p ed $ Sitio pa jg (not js) md esm em ec edc ev po
    | comparaEvent e (quatro k) = World es ks p ed $ Sitio pa jg js md esm em (not ec) edc ev po
    | otherwise   = w
    where k = keyGeneral ks


mapa1 = [[Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Bloco Destrutivel,Bloco Destrutivel,Bloco Destrutivel,Bloco Destrutivel,Vazia,Vazia,Bloco Destrutivel,Bloco Destrutivel,Bloco Destrutivel,Bloco Destrutivel,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Bloco Destrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Destrutivel,Vazia,Vazia,Bloco Destrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Destrutivel,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Bloco Destrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Destrutivel,Vazia,Vazia,Bloco Destrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Destrutivel,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Bloco Destrutivel,Bloco Destrutivel,Bloco Destrutivel,Bloco Destrutivel,Vazia,Vazia,Bloco Destrutivel,Bloco Destrutivel,Bloco Destrutivel,Bloco Destrutivel,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Bloco Destrutivel,Bloco Destrutivel,Bloco Destrutivel,Bloco Destrutivel,Vazia,Vazia,Bloco Destrutivel,Bloco Destrutivel,Bloco Destrutivel,Bloco Destrutivel,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Bloco Destrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Destrutivel,Vazia,Vazia,Bloco Destrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Destrutivel,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Bloco Destrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Destrutivel,Vazia,Vazia,Bloco Destrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Destrutivel,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Bloco Destrutivel,Bloco Destrutivel,Bloco Destrutivel,Bloco Destrutivel,Vazia,Vazia,Bloco Destrutivel,Bloco Destrutivel,Bloco Destrutivel,Bloco Destrutivel,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel]]
mapa2 = [[Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Destrutivel,Bloco Destrutivel,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Bloco Destrutivel,Bloco Destrutivel,Bloco Destrutivel,Bloco Destrutivel,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Bloco Destrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Bloco Indestrutivel,Bloco Destrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Destrutivel,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Bloco Destrutivel,Bloco Destrutivel,Bloco Indestrutivel,Bloco Destrutivel,Bloco Destrutivel,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Bloco Destrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Bloco Destrutivel,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Bloco Indestrutivel,Bloco Indestrutivel,Vazia,Bloco Destrutivel,Bloco Destrutivel,Bloco Destrutivel,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Bloco Indestrutivel,Bloco Indestrutivel,Vazia,Bloco Indestrutivel,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel]]
mapa3 = [[Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Bloco Indestrutivel,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Bloco Indestrutivel,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel]]

-- | TODO                       condiçoes (ec == True && )
reageEditarC :: Event -> World -> World
reageEditarC e w@(World es ks p ed (Sitio pa jg js md esm em ec edc ev po))  
    = if (isCommand e k > 0 && keyState e == Down)
        then World es ks p ed (Sitio pa jg js md esm em ec True ev po)
        else w
    where k = keyGamePlay ks

-- | Testa se o evento pretence as keys do jogo
isCommand :: Event -> Keys -> Int
isCommand e k
    | comparaEvent e (pauseJ k  ) = -1
    | comparaEvent e (p1Up k    ) = 1 
    | comparaEvent e (p1Down k  ) = 2 
    | comparaEvent e (p1Left k  ) = 3 
    | comparaEvent e (p1Rigth k ) = 4 
    | comparaEvent e (p1Canhao k) = 5 
    | comparaEvent e (p1Laser k ) = 6 
    | comparaEvent e (p1Choque k) = 7 
    | comparaEvent e (p2Up k    ) = 8 
    | comparaEvent e (p2Down k  ) = 9 
    | comparaEvent e (p2Left k  ) = 10
    | comparaEvent e (p2Rigth k ) = 11
    | comparaEvent e (p2Canhao k) = 12
    | comparaEvent e (p2Laser k ) = 13
    | comparaEvent e (p2Choque k) = 14
    | comparaEvent e (p3Up k    ) = 15
    | comparaEvent e (p3Down k  ) = 16
    | comparaEvent e (p3Left k  ) = 17
    | comparaEvent e (p3Rigth k ) = 18
    | comparaEvent e (p3Canhao k) = 19
    | comparaEvent e (p3Laser k ) = 20
    | comparaEvent e (p3Choque k) = 21
    | comparaEvent e (p4Up k    ) = 22
    | comparaEvent e (p4Down k  ) = 23
    | comparaEvent e (p4Left k  ) = 24
    | comparaEvent e (p4Rigth k ) = 25
    | comparaEvent e (p4Canhao k) = 26
    | comparaEvent e (p4Laser k ) = 27
    | comparaEvent e (p4Choque k) = 28
    | otherwise = 0


-- | Controlos do Jogo
data Keys = Keys
    { p1Up      :: Event  -- ^ Chave que movimenta o jogador 1 para Cima
    , p1Down    :: Event  -- ^ Chave que movimenta o jogador 1 para Baixo
    , p1Left    :: Event  -- ^ Chave que movimenta o jogador 1 para Esquerda
    , p1Rigth   :: Event  -- ^ Chave que movimenta o jogador 1 para Direita
    , p1Canhao  :: Event  -- ^ Chave que o jogador 1 dispara o canhao
    , p1Laser   :: Event  -- ^ Chave que o jogador 1 dispara o laser
    , p1Choque  :: Event  -- ^ Chave que o jogador 1 dispara o choque
    , p2Up      :: Event  -- ^ Chave que movimenta o jogador 2 para Cima
    , p2Down    :: Event  -- ^ Chave que movimenta o jogador 2 para Baixo
    , p2Left    :: Event  -- ^ Chave que movimenta o jogador 2 para Esquerda
    , p2Rigth   :: Event  -- ^ Chave que movimenta o jogador 2 para Direita
    , p2Canhao  :: Event  -- ^ Chave que o jogador 2 dispara o canhao
    , p2Laser   :: Event  -- ^ Chave que o jogador 2 dispara o laser
    , p2Choque  :: Event  -- ^ Chave que o jogador 2 dispara o choque
    , p3Up      :: Event  -- ^ Chave que movimenta o jogador 3 para Cima
    , p3Down    :: Event  -- ^ Chave que movimenta o jogador 3 para Baixo
    , p3Left    :: Event  -- ^ Chave que movimenta o jogador 3 para Esquerda
    , p3Rigth   :: Event  -- ^ Chave que movimenta o jogador 3 para Direita
    , p3Canhao  :: Event  -- ^ Chave que o jogador 3 dispara o canhao
    , p3Laser   :: Event  -- ^ Chave que o jogador 3 dispara o laser
    , p3Choque  :: Event  -- ^ Chave que o jogador 3 dispara o choque
    , p4Up      :: Event  -- ^ Chave que movimenta o jogador 4 para Cima
    , p4Down    :: Event  -- ^ Chave que movimenta o jogador 4 para Baixo
    , p4Left    :: Event  -- ^ Chave que movimenta o jogador 4 para Esquerda
    , p4Rigth   :: Event  -- ^ Chave que movimenta o jogador 4 para Direita
    , p4Canhao  :: Event  -- ^ Chave que o jogador 4 dispara o canhao
    , p4Laser   :: Event  -- ^ Chave que o jogador 4 dispara o laser
    , p4Choque  :: Event  -- ^ Chave que o jogador 4 dispara o choque
    , pausaJ    :: Event  -- ^ Pausa no Jogo
    }
    deriving (Show,Eq)

data KeyBank = KeyBank
    { keyGamePlay :: Keys       -- ^ Banco de controladores do Jogo
    , keyEditor   :: KeysEd     -- ^ Banco de chaves do Editor
    , keyGeneral  :: KeyGen     -- ^ Chaves que serao usadas para configurar o jogo
    }
    deriving (Show,Eq)
auxTroca :: Event -> Int -> Keys -> Keys
auxTroca e i k@(Keys p1C p1B p1E p1D p1Ca p1La p1Ch p2C p2B p2E p2D p2Ca p2La p2Ch p3C p3B p3E p3D p3Ca p3La p3Ch p4C p4B p4E p4D p4Ca p4La p4Ch pause)
    = case i of
           0  -> k
           1  -> Keys e p1B p1E p1D p1Ca p1La p1Ch p2C p2B p2E p2D p2Ca p2La p2Ch p3C p3B p3E p3D p3Ca p3La p3Ch p4C p4B p4E p4D p4Ca p4La p4Ch pause
           2  -> Keys p1C e p1E p1D p1Ca p1La p1Ch p2C p2B p2E p2D p2Ca p2La p2Ch p3C p3B p3E p3D p3Ca p3La p3Ch p4C p4B p4E p4D p4Ca p4La p4Ch pause
           3  -> Keys p1C p1B e p1D p1Ca p1La p1Ch p2C p2B p2E p2D p2Ca p2La p2Ch p3C p3B p3E p3D p3Ca p3La p3Ch p4C p4B p4E p4D p4Ca p4La p4Ch pause
           4  -> Keys p1C p1B p1E e p1Ca p1La p1Ch p2C p2B p2E p2D p2Ca p2La p2Ch p3C p3B p3E p3D p3Ca p3La p3Ch p4C p4B p4E p4D p4Ca p4La p4Ch pause
           5  -> Keys p1C p1B p1E p1D e p1La p1Ch p2C p2B p2E p2D p2Ca p2La p2Ch p3C p3B p3E p3D p3Ca p3La p3Ch p4C p4B p4E p4D p4Ca p4La p4Ch pause
           6  -> Keys p1C p1B p1E p1D p1Ca e p1Ch p2C p2B p2E p2D p2Ca p2La p2Ch p3C p3B p3E p3D p3Ca p3La p3Ch p4C p4B p4E p4D p4Ca p4La p4Ch pause
           7  -> Keys p1C p1B p1E p1D p1Ca p1La e p2C p2B p2E p2D p2Ca p2La p2Ch p3C p3B p3E p3D p3Ca p3La p3Ch p4C p4B p4E p4D p4Ca p4La p4Ch pause
           8  -> Keys p1C p1B p1E p1D p1Ca p1La p1Ch e p2B p2E p2D p2Ca p2La p2Ch p3C p3B p3E p3D p3Ca p3La p3Ch p4C p4B p4E p4D p4Ca p4La p4Ch pause
           9  -> Keys p1C p1B p1E p1D p1Ca p1La p1Ch p2C e p2E p2D p2Ca p2La p2Ch p3C p3B p3E p3D p3Ca p3La p3Ch p4C p4B p4E p4D p4Ca p4La p4Ch pause
           10 -> Keys p1C p1B p1E p1D p1Ca p1La p1Ch p2C p2B e p2D p2Ca p2La p2Ch p3C p3B p3E p3D p3Ca p3La p3Ch p4C p4B p4E p4D p4Ca p4La p4Ch pause
           11 -> Keys p1C p1B p1E p1D p1Ca p1La p1Ch p2C p2B p2E e p2Ca p2La p2Ch p3C p3B p3E p3D p3Ca p3La p3Ch p4C p4B p4E p4D p4Ca p4La p4Ch pause
           12 -> Keys p1C p1B p1E p1D p1Ca p1La p1Ch p2C p2B p2E p2D e p2La p2Ch p3C p3B p3E p3D p3Ca p3La p3Ch p4C p4B p4E p4D p4Ca p4La p4Ch pause
           13 -> Keys p1C p1B p1E p1D p1Ca p1La p1Ch p2C p2B p2E p2D p2Ca e p2Ch p3C p3B p3E p3D p3Ca p3La p3Ch p4C p4B p4E p4D p4Ca p4La p4Ch pause
           14 -> Keys p1C p1B p1E p1D p1Ca p1La p1Ch p2C p2B p2E p2D p2Ca p2La e p3C p3B p3E p3D p3Ca p3La p3Ch p4C p4B p4E p4D p4Ca p4La p4Ch pause
           15 -> Keys p1C p1B p1E p1D p1Ca p1La p1Ch p2C p2B p2E p2D p2Ca p2La p2Ch e p3B p3E p3D p3Ca p3La p3Ch p4C p4B p4E p4D p4Ca p4La p4Ch pause
           16 -> Keys p1C p1B p1E p1D p1Ca p1La p1Ch p2C p2B p2E p2D p2Ca p2La p2Ch p3C e p3E p3D p3Ca p3La p3Ch p4C p4B p4E p4D p4Ca p4La p4Ch pause
           17 -> Keys p1C p1B p1E p1D p1Ca p1La p1Ch p2C p2B p2E p2D p2Ca p2La p2Ch p3C p3B e p3D p3Ca p3La p3Ch p4C p4B p4E p4D p4Ca p4La p4Ch pause
           18 -> Keys p1C p1B p1E p1D p1Ca p1La p1Ch p2C p2B p2E p2D p2Ca p2La p2Ch p3C p3B p3E e p3Ca p3La p3Ch p4C p4B p4E p4D p4Ca p4La p4Ch pause
           19 -> Keys p1C p1B p1E p1D p1Ca p1La p1Ch p2C p2B p2E p2D p2Ca p2La p2Ch p3C p3B p3E p3D e p3La p3Ch p4C p4B p4E p4D p4Ca p4La p4Ch pause
           20 -> Keys p1C p1B p1E p1D p1Ca p1La p1Ch p2C p2B p2E p2D p2Ca p2La p2Ch p3C p3B p3E p3D p3Ca e p3Ch p4C p4B p4E p4D p4Ca p4La p4Ch pause
           21 -> Keys p1C p1B p1E p1D p1Ca p1La p1Ch p2C p2B p2E p2D p2Ca p2La p2Ch p3C p3B p3E p3D p3Ca p3La e p4C p4B p4E p4D p4Ca p4La p4Ch pause
           22 -> Keys p1C p1B p1E p1D p1Ca p1La p1Ch p2C p2B p2E p2D p2Ca p2La p2Ch p3C p3B p3E p3D p3Ca p3La p3Ch e p4B p4E p4D p4Ca p4La p4Ch pause
           23 -> Keys p1C p1B p1E p1D p1Ca p1La p1Ch p2C p2B p2E p2D p2Ca p2La p2Ch p3C p3B p3E p3D p3Ca p3La p3Ch p4C e p4E p4D p4Ca p4La p4Ch pause
           24 -> Keys p1C p1B p1E p1D p1Ca p1La p1Ch p2C p2B p2E p2D p2Ca p2La p2Ch p3C p3B p3E p3D p3Ca p3La p3Ch p4C p4B e p4D p4Ca p4La p4Ch pause
           25 -> Keys p1C p1B p1E p1D p1Ca p1La p1Ch p2C p2B p2E p2D p2Ca p2La p2Ch p3C p3B p3E p3D p3Ca p3La p3Ch p4C p4B p4E e p4Ca p4La p4Ch pause
           26 -> Keys p1C p1B p1E p1D p1Ca p1La p1Ch p2C p2B p2E p2D p2Ca p2La p2Ch p3C p3B p3E p3D p3Ca p3La p3Ch p4C p4B p4E p4D e p4La p4Ch pause
           27 -> Keys p1C p1B p1E p1D p1Ca p1La p1Ch p2C p2B p2E p2D p2Ca p2La p2Ch p3C p3B p3E p3D p3Ca p3La p3Ch p4C p4B p4E p4D p4Ca e p4Ch pause
           28 -> Keys p1C p1B p1E p1D p1Ca p1La p1Ch p2C p2B p2E p2D p2Ca p2La p2Ch p3C p3B p3E p3D p3Ca p3La p3Ch p4C p4B p4E p4D p4Ca p4La e pause

-- | Reage á adição da nova tecla
reageTrocaC :: Event -> World -> World
reageTrocaC e w@(World es ks p ed (Sitio pa jg js md esm em ec edc ev po)) 
    = if (keyState e == Down && i == 0)
        then World es (trocaChave e ev ks) p ed (Sitio pa jg js md esm em ec edc ev False)
        else if(i > 0) 
            then World es ks p ed (Sitio pa jg js md esm em ec edc ev True)
            else World es ks p ed (Sitio pa jg js md esm em False False ev False)
    where k = keyGamePlay ks
          i = isCommand e k

trocaChave :: Event -> Event -> KeyBank -> KeyBank
trocaChave e ev (KeyBank kj ke kg) = KeyBank (auxTroca e (isCommand ev kj) kj) ke kg

-- | Função utilizada para reagir aos commandos -TODO 
reageEvento :: Event -> World -> World 
reageEvento e w
    = case i of 
        0 -> reageMenu0   e w
        1 -> reageMenu1   e w
        2 -> reageMenu2   e w
        3 -> reageMenu3   e w
        4 -> reageJogo    e w
        5 -> reagePausa   e w
        6 -> reageEditor  e w
        7 -> reageEditarC e w
        8 -> reageTrocaC  e w
        9 -> reageTrocaC  e w
        otherwise -> w
    where i = sitioToInt $ sitio w

-- | Função que recebe um Sitio e retorna um int para escerever um menu ou reagir
-- | 0 -> m0
-- | 1 -> m1
-- | 2 -> m2
-- | 3 -> m3 
-- | 4 -> Jogar
-- | 5 -> Pausa
-- | 6 -> Editor
-- | 7 -> Editar Controlos
-- | 8 -> Espera Pelo proximo evento para substituir os controlos
-- | 9 -> Controlo cedido já esta em uso1
sitioToInt :: Sitio -> Int
sitioToInt (Sitio pause game players mapDefined choSitioseMap editMap editCammands escolhido _ proibido) 
    = if(game) 
        then if(pause)
            then if(editCammands)
                then if(escolhido)
                    then if(proibido) 
                        then 9
                        else 8
                    else 7
                else 5
            else 4
        else if(players)
            then if(x)
                then if(escolhido)
                    then if(editMap)
                        then 6
                        else 2
                    else 7
                else if(mapDefined) 
                    then 3
                    else 1
            else 0
    where x = editCammands || escolhido
                         
desenhaEstado :: World -> Picture
desenhaEstado w = menu0 p

    where p = pics w

    {- = case i of 
        0 -> Translate 0 0 $ menu0 p
        1 -> Translate 0 0 $ menu1 p
        2 -> Translate 0 0 $ menu2 p
        3 -> Translate 0 0 $ scale 0.1 0.2 (p1 p)
        4 -> Translate 0 0 $ scale 0.1 0.2 (p2 p)
        5 -> Translate 0 0 $ scale 0.1 0.2 (p3 p)
        6 -> Translate 0 0 $ scale 0.1 0.2 (p4 p)
        7 -> Translate 0 0 $ laserP p
        otherwise -> Translate 0 0 $ choqueP p
    where i = sitioToInt $ sitio w
          p = pics w
-}
-- | Recebendo as imagens gera o World do Jogo
{-estadoInicial :: Picture -- ^ Imagem do Jogador 1
              -> Picture -- ^ Imagem do Jogador 2
              -> Picture -- ^ Imagem do Jogador 3
              -> Picture -- ^ Imagem do Jogador 4
              -> Picture -- ^ Imagem do Laser
              -> Picture -- ^ Imagem do Canhão
              -> Picture -- ^ Imagem do Choque
              -> Picture -- ^ Menu escolher Jogador
              -> Picture -- ^ Menu 1
              -> Picture -- ^ menu 2
              -> World   -- ^ Tipo principal do Jogo
-}
estadoInicial :: Pics -> World
estadoInicial pics = World e keysDefault pics (editorInicial []) sitioDefault
              where e = Estado [[]] [] []
                    keysDefault = KeyBank keysDefaultJogo keysDefaultEd keysDefaultMenu 
                    
-- | Função que reage ao tempo
reageTempo :: Float -> World -> World
reageTempo x w@(World es ks p ed s@(Sitio pa jg js md esm em ec edc ev po)) 
    = if ((not pa) && jg) then World (tick es) ks p ed s
                          else w









type Pecs =(Picture,Picture,Picture) 
type Mundu = ((Float,Float),Pecs)

--thcus
estadoInicials :: Picture -> Picture -> Picture -> Mundu
estadoInicials m0 m1 m2 = ((0,0),(m0,m1,m2))

poligno :: Picture
poligno = Polygon [(0,0),(10,0),(10,10),(0,10),(0,0)]

desenhaEstados :: Mundu -> Picture
desenhaEstados ((x,y),(m0,m1,m2)) = Translate x y m0
-- scale 0.1 0.2 p
-- reageEvento feita
reageEventos :: Event -> Mundu -> Mundu
reageEventos (EventKey (SpecialKey KeyUp)    Down _ _) ((x,y),p) = ((x,y+5),p)
reageEventos (EventKey (SpecialKey KeyDown)  Down _ _) ((x,y),p) = ((x,y-5),p)
reageEventos (EventKey (SpecialKey KeyLeft)  Down _ _) ((x,y),p) = ((x-5,y),p)
reageEventos (EventKey (SpecialKey KeyRight) Down _ _) ((x,y),p) = ((x+5,y),p)
reageEventos (EventKey (Char '1') Down _ _) ((x,y),(m0,m1,m2)) = ((x,y),(m1,m0,m2))
reageEventos (EventKey (Char '2') Down _ _) ((x,y),(m0,m1,m2)) = ((x,y),(m2,m1,m0))
reageEventos _ s = s -- ignora qualquer outro evento

-- done
reageTempos :: Float -> Mundu -> Mundu
reageTempos n m = m


-- | Frame rate
fr :: Int
fr = 88

-- | dm indica todas as informações sobre a janela do jogo.
dm :: Display
dm = InWindow "Tanks Grupo 142" (800, 600) (0, 0)

-- | Função principal da Tarefa 5.
--
-- __NB:__ Esta Tarefa é completamente livre. Deve utilizar a biblioteca <http://hackage.haskell.org/package/gloss gloss> para animar o jogo, e reutilizar __de forma completa__ as funções das tarefas anteriores.
main :: IO ()
main = do
      {- p1 <- (loadBMP "../img/tank1.bmp")
       p2 <- (loadBMP "../img/tank2.bmp")
       p3 <- (loadBMP "../img/tank3.bmp")
       p4 <- (loadBMP "../img/tank4.bmp")
       g  <- (loadBMP "../img/grass.bmp")
       i  <- (loadBMP "../img/Indestrutivel.bmp")-}
       d  <- (loadBMP "../img/Destrutivel.bmp") 
       m0 <- (loadBMP "../img/menu0.bmp")
       m1 <- (loadBMP "../img/menu1.bmp")
       m2 <- (loadBMP "../img/menu2.bmp")
       play dm              -- janela onde irá correr o jogo
            (greyN 0.5)     -- côr do fundo da janela
            fr              -- frame rate
            (estadoInicial (Pics m0 m0 m1 m2 m0 m1 d m0 m1 m2)) --(estadoInicials m0 m1 m2) 
            desenhaEstado   -- desenha o estado do jogo
            reageEvento     -- reage a um evento
            reageTempo      -- reage ao passar do tempo
