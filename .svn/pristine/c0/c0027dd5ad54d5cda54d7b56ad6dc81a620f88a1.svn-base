-- | Este módulo define funções comuns da Tarefa 4 do trabalho prático.
module Tarefa4_2018li1g142 where

import LI11819

-- * Testes
-- | Testes unitários da Tarefa 4.
--
-- Cada teste é um 'Estado'.
testesT4 :: [Estado]
testesT4 = []

-- * Funções principais da Tarefa 4.

-- | Avança o 'Estado' do jogo um 'Tick' de tempo.
--
-- __NB:__ Apenas os 'Disparo's afetam o 'Estado' do jogo com o passar do tempo.
--
-- __NB:__ Deve chamar as funções 'tickChoques', 'tickCanhoes' e 'tickLasers' pela ordem definida.
tick :: Estado -- ^ O 'Estado' anterior.
     -> Estado -- ^ O 'Estado' após um 'Tick'.
tick = tickChoques . tickCanhoes . tickLasers

-- | Avança o 'Estado' do jogo um 'Tick' de tempo, considerando apenas os efeitos dos tiros de 'Laser' disparados.
tickLasers :: Estado -> Estado
tickLasers e = if haLasers ds 
               then undefined
               else e
               where ds = disparosEstado e

-- | Avança o 'Estado' do jogo um 'Tick' de tempo, considerando apenas os efeitos das balas de 'Canhao' disparadas.
tickCanhoes :: Estado -> Estado
tickCanhoes = undefined

-- | Avança o 'Estado' do jogo um 'Tick' de tempo, considerando apenas os efeitos dos campos de 'Choque' disparados.
tickChoques :: Estado -> Estado
tickChoques = undefined


-- | Verifica se há lasers na lista de disparos
haLasers :: [Disparo] -> Bool
haLasers [] = False
haLasers (h:t) = case h of
                    DisparoLaser -> True
                    otherwise -> haLasers t

-- | Verifica se há choques na lista de disparos
haChoques :: [Disparo] -> Bool
haChoques [] = False
haChoques (h:t) = case h of
                    DisparoChoque -> True
                    otherwise -> haChoques t

-- | Verifica se há tiros de canhão na lista de disparos
haCanhoes :: [Disparo] -> Bool
haCanhoes [] = False
haCanhoes (h:t) = case h of
                    DisparoCanhao -> True
                    otherwise -> haCanhoes t



-- | Avança com a bala do canhão
incrementaCanhao :: Int -> Estado -> Direcao-> Disparo
incrementaCanhao i e dir = case dir of
                             C -> DisparoCanhao i (x-1,y) dir
                             D -> DisparoCanhao i (x,y+1) dir
                             B -> DisparoCanhao i (x+1,y) dir
                             E -> DisparoCanhao i (x,y-1) dir
                         where (x,y) = posicaoJogador ((jogadoresEstado e) !! i)


-- | Testa se uma bala tem coisas à frente
temCoisas :: Mapa -> [Jogador] -> Posicao -> Bool
temCoisas m js p =  temJogador js p || temDestrutivel m p || temIndestrutivel m p

-- | Testa se tem uma parede destrutivel à frente da bala
temDestrutivel :: Mapa -> Posicao -> Bool
temDestrutivel m p = encontraPosicaoMatriz p m == Bloco Destrutivel

-- | Testa se tem uma parede inestrutivel à frente da bala
temIndestrutivel :: Mapa -> Posicao -> Bool
temIndestrutivel m p = encontraPosicaoMatriz p m == Bloco Indestrutivel

-- | Destroi uma parede destrutivel com um tiro
destroiParede :: Mapa -> Peca -> Posicao -> Mapa
destroiParede m _ p = atualizaPosicaoMatriz p Vazia m







{-
-- | Devolve True Se o jogador se mover para um sítio onde se encontra um tiro de canhão
haTiro :: Jogador -> Direcao -> [Disparo] -> Bool
haTiro j dir ds = case dir of 
                        C -> elem (x-2,y-1) (posds ds) || elem (x-2,y) (posds ds) || elem (x-2,y+1) (posds ds)
                        D -> elem (x-1,y+2) (posds ds) || elem (x,y+2) (posds ds) || elem (x+1,y+2) (posds ds)
                        B -> elem (x+2,y-1) (posds ds) || elem (x+2,y) (posds ds) || elem (x+2,y+1) (posds ds)
                        E -> elem (x-1,y-2) (posds ds) || elem (x,y-2) (posds ds) || elem (x+1,y-2) (posds ds)
                    where (x,y) = posicaoJogador j

-- | Devolve uma lista com todas as PosicaoGrelha que um jogador ocupa.
allPosJog :: Jogador -> [PosicaoGrelha]
allPosJog j = [(x-1,y-1),(x-1,y),(x-1,y+1),
               (x,y-1),(x,y),(x,y+1),
               (x+1,y-1),(x+1,y),(x+1,y+1)]
               where (x,y) = posicaoJogador j


-- | Devolve a lista de posições de tiros de canhão
posds :: [Disparo] -> [PosicaoGrelha]
posds (h:t) = case h of 
                DisparoCanhao i p d -> p : posds t
                otherwise -> posds t
-}