-- | Este módulo define funções comuns da Tarefa 5 do trabalho prático.
module Tarefa5_2018li1g142 where

import LI11819
import Tarefa1_2018li1g142
import Tarefa2_2018li1g142
import Tarefa4_2018li1g142
import Graphics.Gloss       
import Graphics.Gloss.Data.Picture  
import Graphics.Gloss.Interface.Pure.Game

-- | Imagens do Jogo
data Pics = Pics
    { p1     :: Picture  -- ^ Imagems do jogador 1
    , p2     :: Picture  -- ^ Imagems do jogador 1
    , p3     :: Picture  -- ^ Imagems do jogador 1
    , p4     :: Picture  -- ^ Imagems do jogador 1
    , laser  :: Picture  -- ^ Imagem do Laser
    , canhao :: Picture  -- ^ Imagem do canhao
    , choque :: Picture  -- ^ imagem do choque
    , menu0  :: Picture  -- ^ Escolher o numero de Jogadores
    , menu1  :: Picture  -- ^ 1º Menu
    , menu2  :: Picture  -- ^ 2º Menu
    }
    deriving (Show,Eq)

-- | Controlos do Jogo
data Keys = Keys
    { p1Up      :: Event  -- ^ Chave que movimenta o jogador 1 para Cima
    , p1Down    :: Event  -- ^ Chave que movimenta o jogador 1 para Baixo
    , p1Left    :: Event  -- ^ Chave que movimenta o jogador 1 para Esquerda
    , p1Rigth   :: Event  -- ^ Chave que movimenta o jogador 1 para Direita
    , p1Canhao  :: Event  -- ^ Chave que o jogador 1 dispara o canhao
    , p1Laser   :: Event  -- ^ Chave que o jogador 1 dispara o laser
    , p1Choque  :: Event  -- ^ Chave que o jogador 1 dispara o choque
    , p2Up      :: Event  -- ^ Chave que movimenta o jogador 2 para Cima
    , p2Down    :: Event  -- ^ Chave que movimenta o jogador 2 para Baixo
    , p2Left    :: Event  -- ^ Chave que movimenta o jogador 2 para Esquerda
    , p2Rigth   :: Event  -- ^ Chave que movimenta o jogador 2 para Direita
    , p2Canhao  :: Event  -- ^ Chave que o jogador 2 dispara o canhao
    , p2Laser   :: Event  -- ^ Chave que o jogador 2 dispara o laser
    , p2Choque  :: Event  -- ^ Chave que o jogador 2 dispara o choque
    , p3Up      :: Event  -- ^ Chave que movimenta o jogador 3 para Cima
    , p3Down    :: Event  -- ^ Chave que movimenta o jogador 3 para Baixo
    , p3Left    :: Event  -- ^ Chave que movimenta o jogador 3 para Esquerda
    , p3Rigth   :: Event  -- ^ Chave que movimenta o jogador 3 para Direita
    , p3Canhao  :: Event  -- ^ Chave que o jogador 3 dispara o canhao
    , p3Laser   :: Event  -- ^ Chave que o jogador 3 dispara o laser
    , p3Choque  :: Event  -- ^ Chave que o jogador 3 dispara o choque
    , p4Up      :: Event  -- ^ Chave que movimenta o jogador 4 para Cima
    , p4Down    :: Event  -- ^ Chave que movimenta o jogador 4 para Baixo
    , p4Left    :: Event  -- ^ Chave que movimenta o jogador 4 para Esquerda
    , p4Rigth   :: Event  -- ^ Chave que movimenta o jogador 4 para Direita
    , p4Canhao  :: Event  -- ^ Chave que o jogador 4 dispara o canhao
    , p4Laser   :: Event  -- ^ Chave que o jogador 4 dispara o laser
    , p4Choque  :: Event  -- ^ Chave que o jogador 4 dispara o choque
    , pausa     :: Event  -- ^ Pausa no Jogo
    , restart   :: Event  -- ^ Recomeça do Jogo
    }
    deriving (Show,Eq)

keysDefault = Keys (EventKey (Char 'w') Down (Modifiers Down Down Down) (0,0))
                   (EventKey (Char 's') Down (Modifiers Down Down Down) (0,0))
                   (EventKey (Char 'a') Down (Modifiers Down Down Down) (0,0))
                   (EventKey (Char 'd') Down (Modifiers Down Down Down) (0,0))
                   (EventKey (Char '1') Down (Modifiers Down Down Down) (0,0))
                   (EventKey (Char '2') Down (Modifiers Down Down Down) (0,0))
                   (EventKey (Char '3') Down (Modifiers Down Down Down) (0,0))
                   (EventKey (Char 't') Down (Modifiers Down Down Down) (0,0))
                   (EventKey (Char 'g') Down (Modifiers Down Down Down) (0,0))
                   (EventKey (Char 'f') Down (Modifiers Down Down Down) (0,0))
                   (EventKey (Char 'h') Down (Modifiers Down Down Down) (0,0))
                   (EventKey (Char '4') Down (Modifiers Down Down Down) (0,0))
                   (EventKey (Char '5') Down (Modifiers Down Down Down) (0,0))
                   (EventKey (Char '6') Down (Modifiers Down Down Down) (0,0))
                   (EventKey (Char 'i') Down (Modifiers Down Down Down) (0,0))
                   (EventKey (Char 'k') Down (Modifiers Down Down Down) (0,0))
                   (EventKey (Char 'j') Down (Modifiers Down Down Down) (0,0))
                   (EventKey (Char 'l') Down (Modifiers Down Down Down) (0,0))
                   (EventKey (Char '7') Down (Modifiers Down Down Down) (0,0))
                   (EventKey (Char '8') Down (Modifiers Down Down Down) (0,0))
                   (EventKey (Char '9') Down (Modifiers Down Down Down) (0,0))
                   (EventKey (SpecialKey KeyUp)    Down (Modifiers Down Down Down) (0,0))
                   (EventKey (SpecialKey KeyDown)  Down (Modifiers Down Down Down) (0,0))
                   (EventKey (SpecialKey KeyLeft)  Down (Modifiers Down Down Down) (0,0))
                   (EventKey (SpecialKey KeyRight) Down (Modifiers Down Down Down) (0,0))
                   (EventKey (Char ',') Down (Modifiers Down Down Down) (0,0))
                   (EventKey (Char '.') Down (Modifiers Down Down Down) (0,0))
                   (EventKey (Char '-') Down (Modifiers Down Down Down) (0,0))
                   (EventKey (SpecialKey KeyF1)  Down (Modifiers Down Down Down) (0,0))
                   (EventKey (SpecialKey KeyF5)  Down (Modifiers Down Down Down) (0,0))

-- | Banco de comandos do editor
data KeysEd = KeysEd
    { up      :: Event -- ^ Move Para cima
    , down    :: Event -- ^ Move Para baixo
    , left    :: Event -- ^ Move Para esquerda
    , rigth   :: Event -- ^ Move Para direita
    , roda    :: Event -- ^ Roda Tertromino
    , mudaT   :: Event -- ^ Muda Tetromino
    , mudaP   :: Event -- ^ Muda parede
    , desenha :: Event -- ^ Desenha Tertromino
    }
    deriving (Show,Eq)

keysEd = KeysEd (EventKey (SpecialKey KeyUp)    Down (Modifiers Down Down Down) (0,0))
                (EventKey (SpecialKey KeyDown)  Down (Modifiers Down Down Down) (0,0))
                (EventKey (SpecialKey KeyLeft)  Down (Modifiers Down Down Down) (0,0))
                (EventKey (SpecialKey KeyRight) Down (Modifiers Down Down Down) (0,0))
                (EventKey (Char 'r')    Down (Modifiers Down Down Down) (0,0))
                (EventKey (Char 't')  Down (Modifiers Down Down Down) (0,0))
                (EventKey (Char 'p')  Down (Modifiers Down Down Down) (0,0))
                (EventKey (Char 'd') Down (Modifiers Down Down Down) (0,0))
-- TODO
data KeyGen = KeyGen
    { um     :: Event 
    , dois   :: Event
    , tres   :: Event
    , quatro :: Event
    }
    deriving (Show,Eq)

-- | Controlos iniciais default para escolhas nos menus
keyGen = KeyGen (EventKey (Char '1') Down (Modifiers Down Down Down) (0,0))
                (EventKey (Char '2') Down (Modifiers Down Down Down) (0,0))
                (EventKey (Char '3') Down (Modifiers Down Down Down) (0,0))
                (EventKey (Char '4') Down (Modifiers Down Down Down) (0,0))

data KeyBank = KeyBank
    { keyGamePlay :: Keys       -- ^ Banco de controladores do Jogo
    , keyEditor   :: KeysEd     -- ^ Banco de chaves do Editor
    , keyGeneral  :: KeyGen     -- ^ Chaves que serao usadas para configurar o jogo
    }
    deriving (Show,Eq)

data Sitio = Sitio
    { sPausa :: Bool
    , jogo   :: Bool
    , m2     :: Bool
    , m1     :: Bool
    , m0     :: Bool
    }
    deriving (Show,Eq)

-- | Valores inicias do Sitio
sitioDefault = Sitio False False False False False

data World = World
    { estado :: Estado   -- ^ Estado do Jogo
    , keys   :: Keys     -- ^ Banco de commandos
    , pics   :: Pics     -- ^ Banco de Imagens
    , editor :: Editor   -- ^ Editor para criar o Estado Inicial
    , sitio  :: Sitio -- ^ Identifica onde estou
    }
    deriving (Show,Eq)

 -- | Funcao auxiiliar que compara o comando recebido com os que a aplicação tem guardados devolvendo um tupulo com o identificador do jogador e com a jogada a executar
reageJogo :: Event -> Keys -> (Int,Jogada)
reageJogo e k | e == p1Up k     = (0, Movimenta C   )
              | e == p1Down k   = (0, Movimenta B   )
              | e == p1Left k   = (0, Movimenta E   )
              | e == p1Rigth k  = (0, Movimenta D   )
              | e == p1Canhao k = (0, Dispara Canhao)
              | e == p1Laser k  = (0, Dispara Laser )
              | e == p1Choque k = (0, Dispara Choque)
              | e == p2Up k     = (1, Movimenta C   )
              | e == p2Down k   = (1, Movimenta B   )
              | e == p2Left k   = (1, Movimenta E   )
              | e == p2Rigth k  = (1, Movimenta D   )
              | e == p2Canhao k = (1, Dispara Canhao)
              | e == p2Laser k  = (1, Dispara Laser )
              | e == p2Choque k = (1, Dispara Choque)
              | e == p3Up k     = (2, Movimenta C   )
              | e == p3Down k   = (2, Movimenta B   )
              | e == p3Left k   = (2, Movimenta E   )
              | e == p3Rigth k  = (2, Movimenta D   )
              | e == p3Canhao k = (2, Dispara Canhao)
              | e == p3Laser k  = (2, Dispara Laser )
              | e == p3Choque k = (2, Dispara Choque)
              | e == p4Up k     = (3, Movimenta C   )
              | e == p4Down k   = (3, Movimenta B   )
              | e == p4Left k   = (3, Movimenta E   )
              | e == p4Rigth k  = (3, Movimenta D   )
              | e == p4Canhao k = (3, Dispara Canhao)
              | e == p4Laser k  = (3, Dispara Laser )
              | e == p4Choque k = (3, Dispara Choque)
              | otherwise  =      (-1,Movimenta C) 

-- | Funcao que reage ao editor
reageEditor :: Event -> KeysEd -> Editor -> Editor
reageEditor e k ed | e == up k      = instrucao (Move C) ed
                   | e == down k    = instrucao (Move B) ed
                   | e == left k    = instrucao (Move E) ed
                   | e == rigth k   = instrucao (Move D) ed
                   | e == roda k    = instrucao Roda ed
                   | e == mudaT k   = instrucao MudaTetromino ed
                   | e == mudaP k   = instrucao MudaParede ed
                   | e == desenha k = instrucao Desenha ed
                   | otherwise = ed

-- | Funcao que adiciona os Jogadores TODO PUYOL
reageJogadores :: Event -> KeyGen -> Estado -> Estado
reageJogadores e k es@(Estado m j d) | e == um k   = es
                                     | e == dois k = es
                                     | e == tres k = es
                                     | otherwise   = es

-- | Função que reage ao Menu1   TODO
reageMenu1 :: Event -> KeyGen -> World -> World
reageMenu1 e k w@(World es ks p ed o) | e == um k   = w
                                      | e == dois k = w
                                      | e == tres k = w
                                      | otherwise   = w

-- | Função que reage ao Menu2   TODO
reageMenu2 :: Event -> KeyGen -> World -> World
reageMenu2 e k w@(World es ks p ed o) | e == um k     = w
                                     | e == dois k   = w
                                     | e == tres k   = w
                                     | e == quatro k = w
                                     | otherwise     = w

-- | Função utilizada para reagir aos commandos -TODO 
reageEvento :: Event -> World -> World 
reageEvento e w@(World es k p ed o) = if(j /= -1) 
                                    then World (jogada j jog es) k p ed o
                                    else w
                                where (j,jog) = reageJogo e k

-- | Recebendo as imagens gera o World do Jogo
estadoInicial :: Picture -- ^ Imagem do Jogador 1
              -> Picture -- ^ Imagem do Jogador 2
              -> Picture -- ^ Imagem do Jogador 3
              -> Picture -- ^ Imagem do Jogador 4
              -> Picture -- ^ Imagem do Laser
              -> Picture -- ^ Imagem do Canhão
              -> Picture -- ^ Imagem do Choque
              -> Picture -- ^ Menu escolher Jogador
              -> Picture -- ^ Menu 1
              -> Picture -- ^ menu 2
              -> World   -- ^ Tipo principal do Jogo
estadoInicial p1 p2 p3 p4 l ca ch m0 m1 m2 = World e keysDefault pics (editorInicial []) sitioDefault
              where e = Estado [[]] [] []
                    pics = Pics p1 p2 p3 p4 l ca ch m0 m1 m2

-- | Função que reage ao tempo
reageTempo :: Float -> World -> World
reageTempo x (World e k p ed i) = World (tick e) k p ed i









type Pecs =(Picture,Picture,Picture) 
type Mundu = ((Float,Float),Pecs)

--thcus
estadoInicials :: Picture -> Picture -> Picture -> Mundu
estadoInicials m0 m1 m2 = ((0,0),(m0,m1,m2))

poligno :: Picture
poligno = Polygon [(0,0),(10,0),(10,10),(0,10),(0,0)]

desenhaEstado :: Mundu -> Picture
desenhaEstado ((x,y),(m0,m1,m2)) = Translate x y m0
-- scale 0.1 0.2 p
-- reageEvento feita
reageEventos :: Event -> Mundu -> Mundu
reageEventos (EventKey (SpecialKey KeyUp)    Down _ _) ((x,y),p) = ((x,y+5),p)
reageEventos (EventKey (SpecialKey KeyDown)  Down _ _) ((x,y),p) = ((x,y-5),p)
reageEventos (EventKey (SpecialKey KeyLeft)  Down _ _) ((x,y),p) = ((x-5,y),p)
reageEventos (EventKey (SpecialKey KeyRight) Down _ _) ((x,y),p) = ((x+5,y),p)
reageEventos (EventKey (Char '1') Down _ _) ((x,y),(m0,m1,m2)) = ((x,y),(m1,m0,m2))
reageEventos (EventKey (Char '2') Down _ _) ((x,y),(m0,m1,m2)) = ((x,y),(m2,m1,m0))
reageEventos _ s = s -- ignora qualquer outro evento

-- done
reageTempos :: Float -> Mundu -> Mundu
reageTempos n m = m


-- | Frame rate
fr :: Int
fr = 88

-- | dm indica todas as informações sobre a janela do jogo.
dm :: Display
dm = InWindow "Tanks Grupo 142" (800, 600) (0, 0)

-- | Função principal da Tarefa 5.
--
-- __NB:__ Esta Tarefa é completamente livre. Deve utilizar a biblioteca <http://hackage.haskell.org/package/gloss gloss> para animar o jogo, e reutilizar __de forma completa__ as funções das tarefas anteriores.
main :: IO ()
main = do
     {-  p1 <- (loadBMP "../img/tank1.bmp")
       p2 <- (loadBMP "../img/tank2.bmp")
       p3 <- (loadBMP "../img/tank3.bmp")
       p4 <- (loadBMP "../img/tank4.bmp")
       g  <- (loadBMP "../img/grass.bmp")
       i  <- (loadBMP "../img/Indestrutivel.bmp")
       d  <- (loadBMP "../img/Destrutivel.bmp") -}
       m0 <- (loadBMP "../img/menu0.bmp")
       m1 <- (loadBMP "../img/menu1.bmp")
       m2 <- (loadBMP "../img/menu2.bmp")
       play dm              -- janela onde irá correr o jogo
            (greyN 0.5)     -- côr do fundo da janela
            fr              -- frame rate
            (estadoInicials m0 m1 m2)  -- estado inicial
            desenhaEstado   -- desenha o estado do jogo
            reageEventos     -- reage a um evento
            reageTempos      -- reage ao passar do tempo
